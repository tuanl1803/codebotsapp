/*
 * @bot-written
 * 
 * WARNING AND NOTICE
 * Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
 * Full Software Licence as accepted by you before being granted access to this source code and other materials,
 * the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
 * commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
 * licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
 * including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
 * access, download, storage, and/or use of this source code.
 * 
 * BOT WARNING
 * This file is bot-written.
 * Any changes out side of "protected regions" will be lost next time the bot makes any changes.
 */

// Plugins
plugins {
	id 'java'
	id 'war'
	id 'eclipse'
	id 'idea'
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'com.benjaminsproule.swagger' version '1.0.6'
	id 'io.spring.dependency-management' version '1.0.7.RELEASE'
	id 'com.adarshr.test-logger' version '1.6.0'

	// % protected region % [Apply any additional plugins here] off begin
	// % protected region % [Apply any additional plugins here] end
}

repositories {
	jcenter()
	mavenCentral()
	mavenLocal()

	// % protected region % [Apply any additional repositories here] off begin
	// % protected region % [Apply any additional repositories here] end
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}

	integrationTestImplementation.extendsFrom(testImplementation)
	integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)

	// % protected region % [Apply any additional configurations here] off begin
	// % protected region % [Apply any additional configurations here] end
}

dependencies {
	// Apache collection
	implementation 'org.apache.commons:commons-collections4:4.3'

	// Java socket
	implementation 'javax.websocket:javax.websocket-api:1.1'

	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'

	// JWT
	compile 'io.jsonwebtoken:jjwt:0.9.1'

	// Testing
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.rest-assured:rest-assured:3.3.0'
	testImplementation 'org.assertj:assertj-core:3.12.2'
	testImplementation 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:5.7.0'
	testImplementation 'net.andreinc.mockneat:mockneat:0.3.6'
	testImplementation 'com.icegreen:greenmail:1.5.10'

	// Spring framework
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'com.sun.xml.bind:jaxb-impl:2.3.0'
	implementation 'com.sun.xml.bind:jaxb-core:2.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'

	// GraphQL
	implementation 'com.graphql-java-kickstart:graphql-java-tools:5.5.1'
	implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:5.7.0'
	implementation 'com.graphql-java-kickstart:altair-spring-boot-starter:5.7.0'
	implementation 'com.graphql-java-kickstart:graphiql-spring-boot-starter:5.7.0'
	implementation 'com.graphql-java-kickstart:voyager-spring-boot-starter:5.7.0'

	// Lombok
	implementation 'org.projectlombok:lombok:1.18.4'

	// Database
	implementation 'mysql:mysql-connector-java'
	implementation 'com.h2database:h2:1.3.148'
	implementation 'org.postgresql:postgresql:42.2.5'

	// Springfox
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	// Hibernate
	implementation 'org.hibernate:hibernate-envers:5.4.1.Final'
	implementation 'org.hibernate:hibernate-entitymanager:5.4.1.Final'
	implementation 'org.hibernate.validator:hibernate-validator-annotation-processor:6.0.15.Final'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:4.2.1'

	// Process annotations
	annotationProcessor 'org.projectlombok:lombok:1.18.4'
	annotationProcessor 'com.querydsl:querydsl-apt:4.2.1:jpa'
	annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
	annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'

	// AWS S3
	implementation 'com.amazonaws:aws-java-sdk-bom:1.11.228'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.11.592'

	// https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
	implementation 'commons-fileupload:commons-fileupload:1.4'

	// % protected region % [Apply any additional dependencies here] off begin
	// % protected region % [Apply any additional dependencies here] end
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}
	test {
		java {
			srcDirs = ['src/test/java']
		}
		resources {
			srcDirs = ['src/test/resources']
		}
	}
	integrationTest {
		java {
			compileClasspath += sourceSets.main.output + sourceSets.test.output
			runtimeClasspath += sourceSets.main.output + sourceSets.test.output

			srcDirs = ['src/integrationTest/java']
		}
		resources {
			srcDirs = ['src/integrationTest/resources']
		}
	}
}

// Javadoc Settings
tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')
}

task copyBuildArtifact(type: Copy) {
	from 'build/libs/'
	include '*.jar'
	into '.'
}

build.finalizedBy(copyBuildArtifact)

bootRun {
	if (project.hasProperty('profile')) {
		systemProperty 'spring.profiles.active', project.findProperty('profile')
	}
}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	systemProperty 'spring.profiles.active', 'test'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
}

check.dependsOn integrationTest

swagger {
	apiSource {
		springmvc = true
		schemes = ['https']
		locations = ['helloapp.controllers']
		swaggerDirectory = '../doc'
		swaggerFileName = 'api'
		info {
			title = 'Swagger Gradle Plugin Sample'
			version = 'v1'
			// use markdown here because I'm using markdown for output,
			// if you need to use html or other markup language, you need to use your target language
			description = 'This is a sample.'
			termsOfService = 'http://www.example.com/termsOfService'
			contact {
				email = 'email@email.com'
				name = 'Name'
				url = 'http://www.example.com'
			}
			license {
				url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
				name = 'Apache 2.0'
			}
		}
	}
}

// % protected region % [Add any additional Gradle tasks here] off begin
// % protected region % [Add any additional Gradle tasks here] end