/*
 * @bot-written
 * 
 * WARNING AND NOTICE
 * Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
 * Full Software Licence as accepted by you before being granted access to this source code and other materials,
 * the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
 * commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
 * licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
 * including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
 * access, download, storage, and/or use of this source code.
 * 
 * BOT WARNING
 * This file is bot-written.
 * Any changes out side of "protected regions" will be lost next time the bot makes any changes.
 */
package helloapp.lib.services.email;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamSource;
import org.springframework.mail.*;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import java.io.IOException;
import java.util.Map.Entry;
import freemarker.template.*;

// % protected region % [Import any additional imports here] off begin
// % protected region % [Import any additional imports here] end

/**
 * Util Service to send email
 */
@Service
public class EmailService {

	/**
	 * Email Sender
	 */
	private JavaMailSender emailSender;

	/**
	 * Configuration of freemarker
	 * This would be used as email template render engine
	 */
	private Configuration freemarkerConfig;

	// % protected region % [Add any additional class fields here] off begin
	// % protected region % [Add any additional class fields here] end

	/**
	 * Constructor for the Email Service
	 * The configuration for the email sender is application.properties
	 * You can also set different configuration for different environments in different application.properties file
	 */
	@Autowired
	public EmailService(
		// % protected region % [Add any constructor parameters here] off begin
		// % protected region % [Add any constructor parameters here] end
		JavaMailSender javaMailSender,
		Configuration freemarkerConfig) {

		this.emailSender = javaMailSender;
		this.freemarkerConfig = freemarkerConfig;

		// % protected region % [Add any additional logic in constructor here] off begin
		// % protected region % [Add any additional logic in constructor here] end
	}

	/**
	 * Send the email
	 * @param email Email to send
	 * @param isHtml Set to true for html emails
	 * @throws MessagingException Exception when could not set the MimeMessage
	 * @throws MailException Exception for the error occurs when send the email failed
	 */
	public void sendEmail(final Email email, boolean isHtml) throws MessagingException, MailException {
		MimeMessage message = emailSender.createMimeMessage();

		MimeMessageHelper helper = new MimeMessageHelper(message, true);

		helper.setTo(email.getReceiptEmailAddresses().toArray(String[]::new));
		helper.setFrom(email.getSenderEmailAddress());
		helper.setSubject(email.getSubject());
		helper.setText(email.getContent(), isHtml);

		for (Entry<String, InputStreamSource> entry : email.getAttachments().entrySet()) {
			helper.addAttachment(entry.getKey(), entry.getValue());
		}

		// % protected region % [Import any additional before sending the email here] off begin
		// % protected region % [Import any additional before sending the email here] end

		this.emailSender.send(message);
	}

	/**
	 * Send email with the content generated by email template
	 * The email template in file system
	 * @param email Email object to send
	 * @throws MessagingException Exception during sending the email
	 * @throws TemplateException Exception caused by the syntax error in template
	 * @throws IOException Exception caused by reading template file
	 */
	public void sendEmailWithTemplateName(final Email email) throws MessagingException, TemplateException, IOException {

		Template emailTemplate = freemarkerConfig.getTemplate(email.getTemplateName());

		// % protected region % [Add any additional logic before sending email in sendEmailWithTemplateName here] off begin
		// % protected region % [Add any additional logic before sending email in sendEmailWithTemplateName here] end

		this.sendEmailWithTemplate(email, emailTemplate);

		// % protected region % [Add any additional logic after sending email in sendEmailWithTemplateName here] off begin
		// % protected region % [Add any additional logic after sending email in sendEmailWithTemplateName here] end
	}

	/**
	 * Send email with the content generated by email template
	 * The email template content is passed as string to the function
	 * @param email Email object to send
	 * @param emailTemplateString Content of email template
	 * @throws MessagingException Exception during sending the email
	 * @throws TemplateException Exception caused by the syntax error in template
	 * @throws IOException Exception caused by reading template file
	 */
	public void sendEmailWithTemplateString(final Email email, final String emailTemplateString) throws MessagingException, TemplateException, IOException {
		Template emailTemplate = createTemplateFromString(emailTemplateString);

		// % protected region % [Add any additional logic before sending email in sendEmailWithTemplateString here] off begin
		// % protected region % [Add any additional logic before sending email in sendEmailWithTemplateString here] end

		this.sendEmailWithTemplate(email, emailTemplate);

		// % protected region % [Add any additional logic after sending email in sendEmailWithTemplateString here] off begin
		// % protected region % [Add any additional logic after sending email in sendEmailWithTemplateString here] end
	}

	/**
	 * Send email with the content generated by email template
	 * The email template content is passed as string to the function
	 * @param email Email object to send
	 * @param emailTemplate Email Template
	 * @throws MessagingException Exception during sending the email
	 * @throws TemplateException Exception caused by the syntax error in template
	 * @throws IOException Exception caused by reading template file
	 */
	public void sendEmailWithTemplate(final Email email, final Template emailTemplate) throws MessagingException, TemplateException, IOException {
		String emailContent = FreeMarkerTemplateUtils.processTemplateIntoString(emailTemplate, email.getEmailVariables());
		email.setContent(emailContent);

		// % protected region % [Add any additional logic before sending email in sendEmailWithTemplate here] off begin
		// % protected region % [Add any additional logic before sending email in sendEmailWithTemplate here] end

		this.sendEmail(email, true);

		// % protected region % [Add any additional after before sending email in sendEmailWithTemplate here] off begin
		// % protected region % [Add any additional after before sending email in sendEmailWithTemplate here] end
	}

	private Template createTemplateFromString(String templateString) throws IOException {
		Template template = new Template("Email Template", templateString, freemarkerConfig);

		// % protected region % [Add any additional logic before return the template here] off begin
		// % protected region % [Add any additional logic before return the template here] end

		return template;
	}

	// % protected region % [Add any additional class methods here] off begin
	// % protected region % [Add any additional class methods here] end
}

